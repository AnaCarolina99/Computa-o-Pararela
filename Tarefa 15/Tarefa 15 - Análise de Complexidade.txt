i) O algoritmo bubblesort será usado na tarefa

ii)Algoritmo paralelizado

int main(){
    int i,j,k,n = 2000;
    int *array = (int*) malloc(n*sizeof(int));
    int *vetMaior = (int*) malloc(n*sizeof(int));

    for(i=0; i < n; i++)
        array[i] = rand() % n;

    /* Bubblesort: */

    for(i = 0; i < n-1; i++)
        for(j = 0; j < n-i-1; j++)
            if(array[j] > array[j+1])
                swap(&array[j], &array[j+1]);

    /*Modelo de máquina RAM:
      A função de complexidade: (n² - 5n + 2) / 2

      Ordem de complexidade: O(n²)

      Modelo de máquina PRAM:
      Considerando que temos infinitos processadores disponíveis, o modelo de máquina PRAM possui a capacidade de apresentar uma complexidade O(n).*/

//O programa foi paralelizado como mostrado abaixo:

    #pragma omp parallel for schedule(dynamic,100) private(i, j, k)
    for(k = n; k > 0; k--){                  //-> O(n)
         for(i = 0; i < k; i++)              //-> O(1)
            vetMaior[i] = 0;
        for(i = 0; i < k; i++)               //-> O(1)
            for(j = 0; j < k; j++)           //-> O(1)
                if(array[i] < array[j])
                    vetMaior[i] = 1;
        for(i = 0; i < k; i++)               //-> O(1)
            if(!vetMaior[i])
                swap(&array[k], &array[i]);
    }

    /*
      No modelo de máquina PRAM, a alteração realizada no método bubblesort, não atingiu a complexidade desejada correspondente a O(1), pois o loop mais externo (for(k = n; k > 0; k--)), levaria O(n), pois ele precisa respeitar a sequencia dele. Desta forma a complexidade do algoritmo é O(n).
    */
}